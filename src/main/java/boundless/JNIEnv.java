package boundless;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.List;

import static java.nio.ByteOrder.nativeOrder;

public class JNIEnv {
    private static final List<String> methods = new ArrayList<String>();
    static {
        methods.add("NULL");
        methods.add("NULL");
        methods.add("NULL");
        methods.add("NULL");
        methods.add("GetVersion");
        methods.add("DefineClass");
        methods.add("FindClass");
        methods.add("FromReflectedMethod");
        methods.add("FromReflectedField");
        methods.add("ToReflectedMethod");
        methods.add("GetSuperclass");
        methods.add("IsAssignableFrom");
        methods.add("ToReflectedField");
        methods.add("Throw");
        methods.add("ThrowNew");
        methods.add("ExceptionOccurred");
        methods.add("ExceptionDescribe");
        methods.add("ExceptionClear");
        methods.add("FatalError");
        methods.add("PushLocalFrame");
        methods.add("PopLocalFrame");
        methods.add("NewGlobalRef");
        methods.add("DeleteGlobalRef");
        methods.add("DeleteLocalRef");
        methods.add("IsSameObject");
        methods.add("NewLocalRef");
        methods.add("EnsureLocalCapacity");
        methods.add("AllocObject");
        methods.add("NewObject");
        methods.add("NewObjectV");
        methods.add("NewObjectA");
        methods.add("GetObjectClass");
        methods.add("IsInstanceOf");
        methods.add("GetMethodID");
        methods.add("CallObjectMethod");
        methods.add("CallObjectMethodV");
        methods.add("CallObjectMethodA");
        methods.add("CallBooleanMethod");
        methods.add("CallBooleanMethodV");
        methods.add("CallBooleanMethodA");
        methods.add("CallByteMethod");
        methods.add("CallByteMethodV");
        methods.add("CallByteMethodA");
        methods.add("CallCharMethod");
        methods.add("CallCharMethodV");
        methods.add("CallCharMethodA");
        methods.add("CallShortMethod");
        methods.add("CallShortMethodV");
        methods.add("CallShortMethodA");
        methods.add("CallIntMethod");
        methods.add("CallIntMethodV");
        methods.add("CallIntMethodA");
        methods.add("CallLongMethod");
        methods.add("CallLongMethodV");
        methods.add("CallLongMethodA");
        methods.add("CallFloatMethod");
        methods.add("CallFloatMethodV");
        methods.add("CallFloatMethodA");
        methods.add("CallDoubleMethod");
        methods.add("CallDoubleMethodV");
        methods.add("CallDoubleMethodA");
        methods.add("CallVoidMethod");
        methods.add("CallVoidMethodV");
        methods.add("CallVoidMethodA");
        methods.add("CallNonvirtualObjectMethod");
        methods.add("CallNonvirtualObjectMethodV");
        methods.add("CallNonvirtualObjectMethodA");
        methods.add("CallNonvirtualBooleanMethod");
        methods.add("CallNonvirtualBooleanMethodV");
        methods.add("CallNonvirtualBooleanMethodA");
        methods.add("CallNonvirtualByteMethod");
        methods.add("CallNonvirtualByteMethodV");
        methods.add("CallNonvirtualByteMethodA");
        methods.add("CallNonvirtualCharMethod");
        methods.add("CallNonvirtualCharMethodV");
        methods.add("CallNonvirtualCharMethodA");
        methods.add("CallNonvirtualShortMethod");
        methods.add("CallNonvirtualShortMethodV");
        methods.add("CallNonvirtualShortMethodA");
        methods.add("CallNonvirtualIntMethod");
        methods.add("CallNonvirtualIntMethodV");
        methods.add("CallNonvirtualIntMethodA");
        methods.add("CallNonvirtualLongMethod");
        methods.add("CallNonvirtualLongMethodV");
        methods.add("CallNonvirtualLongMethodA");
        methods.add("CallNonvirtualFloatMethod");
        methods.add("CallNonvirtualFloatMethodV");
        methods.add("CallNonvirtualFloatMethodA");
        methods.add("CallNonvirtualDoubleMethod");
        methods.add("CallNonvirtualDoubleMethodV");
        methods.add("CallNonvirtualDoubleMethodA");
        methods.add("CallNonvirtualVoidMethod");
        methods.add("CallNonvirtualVoidMethodV");
        methods.add("CallNonvirtualVoidMethodA");
        methods.add("GetFieldID");
        methods.add("GetObjectField");
        methods.add("GetBooleanField");
        methods.add("GetByteField");
        methods.add("GetCharField");
        methods.add("GetShortField");
        methods.add("GetIntField");
        methods.add("GetLongField");
        methods.add("GetFloatField");
        methods.add("GetDoubleField");
        methods.add("SetObjectField");
        methods.add("SetBooleanField");
        methods.add("SetByteField");
        methods.add("SetCharField");
        methods.add("SetShortField");
        methods.add("SetIntField");
        methods.add("SetLongField");
        methods.add("SetFloatField");
        methods.add("SetDoubleField");
        methods.add("GetStaticMethodID");
        methods.add("CallStaticObjectMethod");
        methods.add("CallStaticObjectMethodV");
        methods.add("CallStaticObjectMethodA");
        methods.add("CallStaticBooleanMethod");
        methods.add("CallStaticBooleanMethodV");
        methods.add("CallStaticBooleanMethodA");
        methods.add("CallStaticByteMethod");
        methods.add("CallStaticByteMethodV");
        methods.add("CallStaticByteMethodA");
        methods.add("CallStaticCharMethod");
        methods.add("CallStaticCharMethodV");
        methods.add("CallStaticCharMethodA");
        methods.add("CallStaticShortMethod");
        methods.add("CallStaticShortMethodV");
        methods.add("CallStaticShortMethodA");
        methods.add("CallStaticIntMethod");
        methods.add("CallStaticIntMethodV");
        methods.add("CallStaticIntMethodA");
        methods.add("CallStaticLongMethod");
        methods.add("CallStaticLongMethodV");
        methods.add("CallStaticLongMethodA");
        methods.add("CallStaticFloatMethod");
        methods.add("CallStaticFloatMethodV");
        methods.add("CallStaticFloatMethodA");
        methods.add("CallStaticDoubleMethod");
        methods.add("CallStaticDoubleMethodV");
        methods.add("CallStaticDoubleMethodA");
        methods.add("CallStaticVoidMethod");
        methods.add("CallStaticVoidMethodV");
        methods.add("CallStaticVoidMethodA");
        methods.add("GetStaticFieldID");
        methods.add("GetStaticObjectField");
        methods.add("GetStaticBooleanField");
        methods.add("GetStaticByteField");
        methods.add("GetStaticCharField");
        methods.add("GetStaticShortField");
        methods.add("GetStaticIntField");
        methods.add("GetStaticLongField");
        methods.add("GetStaticFloatField");
        methods.add("GetStaticDoubleField");
        methods.add("SetStaticObjectField");
        methods.add("SetStaticBooleanField");
        methods.add("SetStaticByteField");
        methods.add("SetStaticCharField");
        methods.add("SetStaticShortField");
        methods.add("SetStaticIntField");
        methods.add("SetStaticLongField");
        methods.add("SetStaticFloatField");
        methods.add("SetStaticDoubleField");
        methods.add("NewString");
        methods.add("GetStringLength");
        methods.add("GetStringChars");
        methods.add("ReleaseStringChars");
        methods.add("NewStringUTF");
        methods.add("GetStringUTFLength");
        methods.add("GetStringUTFChars");
        methods.add("ReleaseStringUTFChars");
        methods.add("GetArrayLength");
        methods.add("NewObjectArray");
        methods.add("GetObjectArrayElement");
        methods.add("SetObjectArrayElement");
        methods.add("NewBooleanArray");
        methods.add("NewByteArray");
        methods.add("NewCharArray");
        methods.add("NewShortArray");
        methods.add("NewIntArray");
        methods.add("NewLongArray");
        methods.add("NewFloatArray");
        methods.add("NewDoubleArray");
        methods.add("GetBooleanArrayElements");
        methods.add("GetByteArrayElements");
        methods.add("GetCharArrayElements");
        methods.add("GetShortArrayElements");
        methods.add("GetIntArrayElements");
        methods.add("GetLongArrayElements");
        methods.add("GetFloatArrayElements");
        methods.add("GetDoubleArrayElements");
        methods.add("ReleaseBooleanArrayElements");
        methods.add("ReleaseByteArrayElements");
        methods.add("ReleaseCharArrayElements");
        methods.add("ReleaseShortArrayElements");
        methods.add("ReleaseIntArrayElements");
        methods.add("ReleaseLongArrayElements");
        methods.add("ReleaseFloatArrayElements");
        methods.add("ReleaseDoubleArrayElements");
        methods.add("GetBooleanArrayRegion");
        methods.add("GetByteArrayRegion");
        methods.add("GetCharArrayRegion");
        methods.add("GetShortArrayRegion");
        methods.add("GetIntArrayRegion");
        methods.add("GetLongArrayRegion");
        methods.add("GetFloatArrayRegion");
        methods.add("GetDoubleArrayRegion");
        methods.add("SetBooleanArrayRegion");
        methods.add("SetByteArrayRegion");
        methods.add("SetCharArrayRegion");
        methods.add("SetShortArrayRegion");
        methods.add("SetIntArrayRegion");
        methods.add("SetLongArrayRegion");
        methods.add("SetFloatArrayRegion");
        methods.add("SetDoubleArrayRegion");
        methods.add("RegisterNatives");
        methods.add("UnregisterNatives");
        methods.add("MonitorEnter");
        methods.add("MonitorExit");
        methods.add("GetJavaVM");
        methods.add("GetStringRegion");
        methods.add("GetStringUTFRegion");
        methods.add("GetPrimitiveArrayCritical");
        methods.add("ReleasePrimitiveArrayCritical");
        methods.add("GetStringCritical");
        methods.add("ReleaseStringCritical");
        methods.add("NewWeakGlobalRef");
        methods.add("DeleteWeakGlobalRef");
        methods.add("ExceptionCheck");
        methods.add("NewDirectByteBuffer");
        methods.add("GetDirectBufferAddress");
        methods.add("GetDirectBufferCapacity");
        methods.add("GetObjectRefType");
    }

    public static int indexOfMethod(String name) {
        return methods.indexOf(name);
    }

    public static long addressOfMethod(String name) {
        int jvmMethodTableAddress = Native.getByteBuffer(getEnvPointer(), 4).order(nativeOrder()).getInt();
        ByteBuffer jvmMethodTable = Native.getByteBuffer(jvmMethodTableAddress, methods.size() * 4).order(nativeOrder());
        int methodIndex = indexOfMethod(name);
        return jvmMethodTable.getInt(methodIndex * 4);
    }

    public static native long getEnvPointer();

    public static native long getMethodID(Class<?> clazz, String name, String signature);
    public static native long getStaticMethodID(Class<?> clazz, String name, String signature);
    public static native long getClassPtr(Class<?> clazz);
}
